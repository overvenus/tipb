// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: select.proto

package tipb

import (
	"fmt"
	"io"
	"math"

	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
	github_com_pingcap_tipb_sharedbytes "github.com/pingcap/tipb/sharedbytes"

	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type EncodeType int32

const (
	EncodeType_TypeDefault EncodeType = 0
	EncodeType_TypeChunk   EncodeType = 1
	// TypeCHBlock is used by TiSpark and TiFlash, in this encode mode, TiFlash will encode the data using native ch block format
	EncodeType_TypeCHBlock EncodeType = 2
)

var EncodeType_name = map[int32]string{
	0: "TypeDefault",
	1: "TypeChunk",
	2: "TypeCHBlock",
}

var EncodeType_value = map[string]int32{
	"TypeDefault": 0,
	"TypeChunk":   1,
	"TypeCHBlock": 2,
}

func (x EncodeType) Enum() *EncodeType {
	p := new(EncodeType)
	*p = x
	return p
}

func (x EncodeType) String() string {
	return proto.EnumName(EncodeType_name, int32(x))
}

func (x *EncodeType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(EncodeType_value, data, "EncodeType")
	if err != nil {
		return err
	}
	*x = EncodeType(value)
	return nil
}

func (EncodeType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_86353caa10f8b4d7, []int{0}
}

type Endian int32

const (
	Endian_LittleEndian Endian = 0
	Endian_BigEndian    Endian = 1
)

var Endian_name = map[int32]string{
	0: "LittleEndian",
	1: "BigEndian",
}

var Endian_value = map[string]int32{
	"LittleEndian": 0,
	"BigEndian":    1,
}

func (x Endian) Enum() *Endian {
	p := new(Endian)
	*p = x
	return p
}

func (x Endian) String() string {
	return proto.EnumName(Endian_name, int32(x))
}

func (x *Endian) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Endian_value, data, "Endian")
	if err != nil {
		return err
	}
	*x = Endian(value)
	return nil
}

func (Endian) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_86353caa10f8b4d7, []int{1}
}

// values are all in text format.
type Row struct {
	Handle []byte `protobuf:"bytes,1,opt,name=handle" json:"handle,omitempty"`
	Data   []byte `protobuf:"bytes,2,opt,name=data" json:"data,omitempty"`
}

func (m *Row) Reset()         { *m = Row{} }
func (m *Row) String() string { return proto.CompactTextString(m) }
func (*Row) ProtoMessage()    {}
func (*Row) Descriptor() ([]byte, []int) {
	return fileDescriptor_86353caa10f8b4d7, []int{0}
}
func (m *Row) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Row) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Row.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Row) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Row.Merge(m, src)
}
func (m *Row) XXX_Size() int {
	return m.Size()
}
func (m *Row) XXX_DiscardUnknown() {
	xxx_messageInfo_Row.DiscardUnknown(m)
}

var xxx_messageInfo_Row proto.InternalMessageInfo

func (m *Row) GetHandle() []byte {
	if m != nil {
		return m.Handle
	}
	return nil
}

func (m *Row) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type Error struct {
	Code int32  `protobuf:"varint,1,opt,name=code" json:"code"`
	Msg  string `protobuf:"bytes,2,opt,name=msg" json:"msg"`
}

func (m *Error) Reset()         { *m = Error{} }
func (m *Error) String() string { return proto.CompactTextString(m) }
func (*Error) ProtoMessage()    {}
func (*Error) Descriptor() ([]byte, []int) {
	return fileDescriptor_86353caa10f8b4d7, []int{1}
}
func (m *Error) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Error) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Error.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Error) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Error.Merge(m, src)
}
func (m *Error) XXX_Size() int {
	return m.Size()
}
func (m *Error) XXX_DiscardUnknown() {
	xxx_messageInfo_Error.DiscardUnknown(m)
}

var xxx_messageInfo_Error proto.InternalMessageInfo

func (m *Error) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *Error) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

// Response for SelectRequest.
type SelectResponse struct {
	Error *Error `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	// Result rows.
	Rows []*Row `protobuf:"bytes,2,rep,name=rows" json:"rows,omitempty"`
	// Use multiple chunks to reduce memory allocation and
	// avoid allocating large contiguous memory.
	Chunks       []Chunk  `protobuf:"bytes,3,rep,name=chunks" json:"chunks"`
	Warnings     []*Error `protobuf:"bytes,4,rep,name=warnings" json:"warnings,omitempty"`
	OutputCounts []int64  `protobuf:"varint,5,rep,name=output_counts,json=outputCounts" json:"output_counts,omitempty"`
	WarningCount *int64   `protobuf:"varint,6,opt,name=warning_count,json=warningCount" json:"warning_count,omitempty"`
	// The execution summary of each executor, in the order in request.
	ExecutionSummaries []*ExecutorExecutionSummary `protobuf:"bytes,8,rep,name=execution_summaries,json=executionSummaries" json:"execution_summaries,omitempty"`
	// It indicates the encode type of response.
	EncodeType EncodeType `protobuf:"varint,9,opt,name=encode_type,json=encodeType,enum=tipb.EncodeType" json:"encode_type"`
	// ndvs collects the number of distinct value information per range. It will be used to serve as execution feedback information.
	// Helping us improve the table's statistics information.
	Ndvs []int64 `protobuf:"varint,10,rep,name=ndvs" json:"ndvs,omitempty"`
}

func (m *SelectResponse) Reset()         { *m = SelectResponse{} }
func (m *SelectResponse) String() string { return proto.CompactTextString(m) }
func (*SelectResponse) ProtoMessage()    {}
func (*SelectResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_86353caa10f8b4d7, []int{2}
}
func (m *SelectResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SelectResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SelectResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SelectResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SelectResponse.Merge(m, src)
}
func (m *SelectResponse) XXX_Size() int {
	return m.Size()
}
func (m *SelectResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SelectResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SelectResponse proto.InternalMessageInfo

func (m *SelectResponse) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *SelectResponse) GetRows() []*Row {
	if m != nil {
		return m.Rows
	}
	return nil
}

func (m *SelectResponse) GetChunks() []Chunk {
	if m != nil {
		return m.Chunks
	}
	return nil
}

func (m *SelectResponse) GetWarnings() []*Error {
	if m != nil {
		return m.Warnings
	}
	return nil
}

func (m *SelectResponse) GetOutputCounts() []int64 {
	if m != nil {
		return m.OutputCounts
	}
	return nil
}

func (m *SelectResponse) GetWarningCount() int64 {
	if m != nil && m.WarningCount != nil {
		return *m.WarningCount
	}
	return 0
}

func (m *SelectResponse) GetExecutionSummaries() []*ExecutorExecutionSummary {
	if m != nil {
		return m.ExecutionSummaries
	}
	return nil
}

func (m *SelectResponse) GetEncodeType() EncodeType {
	if m != nil {
		return m.EncodeType
	}
	return EncodeType_TypeDefault
}

func (m *SelectResponse) GetNdvs() []int64 {
	if m != nil {
		return m.Ndvs
	}
	return nil
}

// Chunk contains multiple rows data and rows meta.
type Chunk struct {
	// Data for all rows in the chunk.
	RowsData github_com_pingcap_tipb_sharedbytes.SharedBytes `protobuf:"bytes,3,opt,name=rows_data,json=rowsData,customtype=github.com/pingcap/tipb/sharedbytes.SharedBytes" json:"rows_data"`
	// Meta data for every row.
	RowsMeta []RowMeta `protobuf:"bytes,4,rep,name=rows_meta,json=rowsMeta" json:"rows_meta"`
}

func (m *Chunk) Reset()         { *m = Chunk{} }
func (m *Chunk) String() string { return proto.CompactTextString(m) }
func (*Chunk) ProtoMessage()    {}
func (*Chunk) Descriptor() ([]byte, []int) {
	return fileDescriptor_86353caa10f8b4d7, []int{3}
}
func (m *Chunk) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Chunk) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Chunk.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Chunk) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Chunk.Merge(m, src)
}
func (m *Chunk) XXX_Size() int {
	return m.Size()
}
func (m *Chunk) XXX_DiscardUnknown() {
	xxx_messageInfo_Chunk.DiscardUnknown(m)
}

var xxx_messageInfo_Chunk proto.InternalMessageInfo

func (m *Chunk) GetRowsMeta() []RowMeta {
	if m != nil {
		return m.RowsMeta
	}
	return nil
}

// RowMeta contains row handle and length of a row.
type RowMeta struct {
	Handle int64 `protobuf:"varint,1,opt,name=handle" json:"handle"`
	Length int64 `protobuf:"varint,2,opt,name=length" json:"length"`
}

func (m *RowMeta) Reset()         { *m = RowMeta{} }
func (m *RowMeta) String() string { return proto.CompactTextString(m) }
func (*RowMeta) ProtoMessage()    {}
func (*RowMeta) Descriptor() ([]byte, []int) {
	return fileDescriptor_86353caa10f8b4d7, []int{4}
}
func (m *RowMeta) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RowMeta) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RowMeta.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RowMeta) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RowMeta.Merge(m, src)
}
func (m *RowMeta) XXX_Size() int {
	return m.Size()
}
func (m *RowMeta) XXX_DiscardUnknown() {
	xxx_messageInfo_RowMeta.DiscardUnknown(m)
}

var xxx_messageInfo_RowMeta proto.InternalMessageInfo

func (m *RowMeta) GetHandle() int64 {
	if m != nil {
		return m.Handle
	}
	return 0
}

func (m *RowMeta) GetLength() int64 {
	if m != nil {
		return m.Length
	}
	return 0
}

// DAGRequest represents the request that will be handled with DAG mode.
type DAGRequest struct {
	// Transaction start timestamp.
	// Deprecated. Start Ts has been moved to coprocessor.Request.
	StartTsFallback *uint64 `protobuf:"varint,1,opt,name=start_ts_fallback,json=startTsFallback" json:"start_ts_fallback,omitempty"`
	// It represents push down Executors.
	Executors []*Executor `protobuf:"bytes,2,rep,name=executors" json:"executors,omitempty"`
	// time zone offset in seconds
	TimeZoneOffset int64 `protobuf:"varint,3,opt,name=time_zone_offset,json=timeZoneOffset" json:"time_zone_offset"`
	// flags are used to store flags that change the execution mode, it contains:
	//	ignore_truncate = 1
	//		truncate error should be ignore if set.
	//	truncate_as_warning = 1 << 1
	//		when ignored_truncate is not set, return warning instead of error if this flag is set.
	//	...
	//	add more when needed.
	Flags uint64 `protobuf:"varint,4,opt,name=flags" json:"flags"`
	// It represents which columns we should output.
	OutputOffsets []uint32 `protobuf:"varint,5,rep,name=output_offsets,json=outputOffsets" json:"output_offsets,omitempty"`
	// It represents whether we collect the detailed scan counts in each range.
	CollectRangeCounts *bool `protobuf:"varint,6,opt,name=collect_range_counts,json=collectRangeCounts" json:"collect_range_counts,omitempty"`
	// It indicates the maximum number of warning,
	// which is the number of messages that SHOW WARNINGS displays.
	MaxWarningCount *uint64 `protobuf:"varint,7,opt,name=max_warning_count,json=maxWarningCount" json:"max_warning_count,omitempty"`
	// It indicates the encode type of response.
	EncodeType EncodeType `protobuf:"varint,8,opt,name=encode_type,json=encodeType,enum=tipb.EncodeType" json:"encode_type"`
	// It indicates the sql_mode.
	SqlMode *uint64 `protobuf:"varint,9,opt,name=sql_mode,json=sqlMode" json:"sql_mode,omitempty"`
	// supply offset is not enough since we have daylight saving time present in some regions
	TimeZoneName string `protobuf:"bytes,11,opt,name=time_zone_name,json=timeZoneName" json:"time_zone_name"`
	// It represents whether or not TiKV should collect execution summaries.
	// Execution summaries will be collected into `execution_summaries` field
	// in the response.
	CollectExecutionSummaries *bool `protobuf:"varint,12,opt,name=collect_execution_summaries,json=collectExecutionSummaries" json:"collect_execution_summaries,omitempty"`
	// Represents the maximum size of one packet, any generated string, or any parameter sent as long data.
	MaxAllowedPacket *uint64 `protobuf:"varint,13,opt,name=max_allowed_packet,json=maxAllowedPacket" json:"max_allowed_packet,omitempty"`
	// Represents the chunk memory layout.
	ChunkMemoryLayout *ChunkMemoryLayout `protobuf:"bytes,14,opt,name=chunk_memory_layout,json=chunkMemoryLayout" json:"chunk_memory_layout,omitempty"`
	// Represents whether the expression use RPN form.
	IsRpnExpr *bool `protobuf:"varint,15,opt,name=is_rpn_expr,json=isRpnExpr" json:"is_rpn_expr,omitempty"`
	// UserIdentity uses to do privilege check. It is only used in TiDB cluster memory table.
	User *UserIdentity `protobuf:"bytes,16,opt,name=user" json:"user,omitempty"`
	// Represents tree struct based executors, if this field is set, should ignore the executors field, currently only used in TiFlash
	RootExecutor *Executor `protobuf:"bytes,17,opt,name=root_executor,json=rootExecutor" json:"root_executor,omitempty"`
	// Force using the encode type specified by encode_type, currently only used in TiFlash
	ForceEncodeType *bool `protobuf:"varint,18,opt,name=force_encode_type,json=forceEncodeType" json:"force_encode_type,omitempty"`
	// It indicates the number of digits by which to increase the scale of the result of division operations performed with the / operator.
	DivPrecisionIncrement *uint32 `protobuf:"varint,19,opt,name=div_precision_increment,json=divPrecisionIncrement" json:"div_precision_increment,omitempty"`
}

func (m *DAGRequest) Reset()         { *m = DAGRequest{} }
func (m *DAGRequest) String() string { return proto.CompactTextString(m) }
func (*DAGRequest) ProtoMessage()    {}
func (*DAGRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_86353caa10f8b4d7, []int{5}
}
func (m *DAGRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DAGRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DAGRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DAGRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DAGRequest.Merge(m, src)
}
func (m *DAGRequest) XXX_Size() int {
	return m.Size()
}
func (m *DAGRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DAGRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DAGRequest proto.InternalMessageInfo

func (m *DAGRequest) GetStartTsFallback() uint64 {
	if m != nil && m.StartTsFallback != nil {
		return *m.StartTsFallback
	}
	return 0
}

func (m *DAGRequest) GetExecutors() []*Executor {
	if m != nil {
		return m.Executors
	}
	return nil
}

func (m *DAGRequest) GetTimeZoneOffset() int64 {
	if m != nil {
		return m.TimeZoneOffset
	}
	return 0
}

func (m *DAGRequest) GetFlags() uint64 {
	if m != nil {
		return m.Flags
	}
	return 0
}

func (m *DAGRequest) GetOutputOffsets() []uint32 {
	if m != nil {
		return m.OutputOffsets
	}
	return nil
}

func (m *DAGRequest) GetCollectRangeCounts() bool {
	if m != nil && m.CollectRangeCounts != nil {
		return *m.CollectRangeCounts
	}
	return false
}

func (m *DAGRequest) GetMaxWarningCount() uint64 {
	if m != nil && m.MaxWarningCount != nil {
		return *m.MaxWarningCount
	}
	return 0
}

func (m *DAGRequest) GetEncodeType() EncodeType {
	if m != nil {
		return m.EncodeType
	}
	return EncodeType_TypeDefault
}

func (m *DAGRequest) GetSqlMode() uint64 {
	if m != nil && m.SqlMode != nil {
		return *m.SqlMode
	}
	return 0
}

func (m *DAGRequest) GetTimeZoneName() string {
	if m != nil {
		return m.TimeZoneName
	}
	return ""
}

func (m *DAGRequest) GetCollectExecutionSummaries() bool {
	if m != nil && m.CollectExecutionSummaries != nil {
		return *m.CollectExecutionSummaries
	}
	return false
}

func (m *DAGRequest) GetMaxAllowedPacket() uint64 {
	if m != nil && m.MaxAllowedPacket != nil {
		return *m.MaxAllowedPacket
	}
	return 0
}

func (m *DAGRequest) GetChunkMemoryLayout() *ChunkMemoryLayout {
	if m != nil {
		return m.ChunkMemoryLayout
	}
	return nil
}

func (m *DAGRequest) GetIsRpnExpr() bool {
	if m != nil && m.IsRpnExpr != nil {
		return *m.IsRpnExpr
	}
	return false
}

func (m *DAGRequest) GetUser() *UserIdentity {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *DAGRequest) GetRootExecutor() *Executor {
	if m != nil {
		return m.RootExecutor
	}
	return nil
}

func (m *DAGRequest) GetForceEncodeType() bool {
	if m != nil && m.ForceEncodeType != nil {
		return *m.ForceEncodeType
	}
	return false
}

func (m *DAGRequest) GetDivPrecisionIncrement() uint32 {
	if m != nil && m.DivPrecisionIncrement != nil {
		return *m.DivPrecisionIncrement
	}
	return 0
}

type ChunkMemoryLayout struct {
	// Represents the endian.
	Endian Endian `protobuf:"varint,1,opt,name=endian,enum=tipb.Endian" json:"endian"`
}

func (m *ChunkMemoryLayout) Reset()         { *m = ChunkMemoryLayout{} }
func (m *ChunkMemoryLayout) String() string { return proto.CompactTextString(m) }
func (*ChunkMemoryLayout) ProtoMessage()    {}
func (*ChunkMemoryLayout) Descriptor() ([]byte, []int) {
	return fileDescriptor_86353caa10f8b4d7, []int{6}
}
func (m *ChunkMemoryLayout) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChunkMemoryLayout) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChunkMemoryLayout.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChunkMemoryLayout) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChunkMemoryLayout.Merge(m, src)
}
func (m *ChunkMemoryLayout) XXX_Size() int {
	return m.Size()
}
func (m *ChunkMemoryLayout) XXX_DiscardUnknown() {
	xxx_messageInfo_ChunkMemoryLayout.DiscardUnknown(m)
}

var xxx_messageInfo_ChunkMemoryLayout proto.InternalMessageInfo

func (m *ChunkMemoryLayout) GetEndian() Endian {
	if m != nil {
		return m.Endian
	}
	return Endian_LittleEndian
}

type UserIdentity struct {
	UserName string `protobuf:"bytes,1,opt,name=user_name,json=userName" json:"user_name"`
	UserHost string `protobuf:"bytes,2,opt,name=user_host,json=userHost" json:"user_host"`
}

func (m *UserIdentity) Reset()         { *m = UserIdentity{} }
func (m *UserIdentity) String() string { return proto.CompactTextString(m) }
func (*UserIdentity) ProtoMessage()    {}
func (*UserIdentity) Descriptor() ([]byte, []int) {
	return fileDescriptor_86353caa10f8b4d7, []int{7}
}
func (m *UserIdentity) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserIdentity) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserIdentity.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserIdentity) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserIdentity.Merge(m, src)
}
func (m *UserIdentity) XXX_Size() int {
	return m.Size()
}
func (m *UserIdentity) XXX_DiscardUnknown() {
	xxx_messageInfo_UserIdentity.DiscardUnknown(m)
}

var xxx_messageInfo_UserIdentity proto.InternalMessageInfo

func (m *UserIdentity) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

func (m *UserIdentity) GetUserHost() string {
	if m != nil {
		return m.UserHost
	}
	return ""
}

type StreamResponse struct {
	Error *Error `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	// Data for all rows
	Data     github_com_pingcap_tipb_sharedbytes.SharedBytes `protobuf:"bytes,3,opt,name=data,customtype=github.com/pingcap/tipb/sharedbytes.SharedBytes" json:"data"`
	Warnings []*Error                                        `protobuf:"bytes,4,rep,name=warnings" json:"warnings,omitempty"`
	// output row count for each executor
	OutputCounts []int64 `protobuf:"varint,5,rep,name=output_counts,json=outputCounts" json:"output_counts,omitempty"`
	WarningCount *int64  `protobuf:"varint,6,opt,name=warning_count,json=warningCount" json:"warning_count,omitempty"`
	Ndvs         []int64 `protobuf:"varint,7,rep,name=ndvs" json:"ndvs,omitempty"`
}

func (m *StreamResponse) Reset()         { *m = StreamResponse{} }
func (m *StreamResponse) String() string { return proto.CompactTextString(m) }
func (*StreamResponse) ProtoMessage()    {}
func (*StreamResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_86353caa10f8b4d7, []int{8}
}
func (m *StreamResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StreamResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StreamResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StreamResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamResponse.Merge(m, src)
}
func (m *StreamResponse) XXX_Size() int {
	return m.Size()
}
func (m *StreamResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamResponse.DiscardUnknown(m)
}

var xxx_messageInfo_StreamResponse proto.InternalMessageInfo

func (m *StreamResponse) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *StreamResponse) GetWarnings() []*Error {
	if m != nil {
		return m.Warnings
	}
	return nil
}

func (m *StreamResponse) GetOutputCounts() []int64 {
	if m != nil {
		return m.OutputCounts
	}
	return nil
}

func (m *StreamResponse) GetWarningCount() int64 {
	if m != nil && m.WarningCount != nil {
		return *m.WarningCount
	}
	return 0
}

func (m *StreamResponse) GetNdvs() []int64 {
	if m != nil {
		return m.Ndvs
	}
	return nil
}

func init() {
	proto.RegisterEnum("tipb.EncodeType", EncodeType_name, EncodeType_value)
	proto.RegisterEnum("tipb.Endian", Endian_name, Endian_value)
	proto.RegisterType((*Row)(nil), "tipb.Row")
	proto.RegisterType((*Error)(nil), "tipb.Error")
	proto.RegisterType((*SelectResponse)(nil), "tipb.SelectResponse")
	proto.RegisterType((*Chunk)(nil), "tipb.Chunk")
	proto.RegisterType((*RowMeta)(nil), "tipb.RowMeta")
	proto.RegisterType((*DAGRequest)(nil), "tipb.DAGRequest")
	proto.RegisterType((*ChunkMemoryLayout)(nil), "tipb.ChunkMemoryLayout")
	proto.RegisterType((*UserIdentity)(nil), "tipb.UserIdentity")
	proto.RegisterType((*StreamResponse)(nil), "tipb.StreamResponse")
}

func init() { proto.RegisterFile("select.proto", fileDescriptor_86353caa10f8b4d7) }

var fileDescriptor_86353caa10f8b4d7 = []byte{
	// 1083 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x55, 0x4d, 0x6f, 0x1b, 0x45,
	0x18, 0xf6, 0xc6, 0x1f, 0xb1, 0x5f, 0x7f, 0xc4, 0x99, 0x7e, 0x6d, 0x43, 0x71, 0x5d, 0x23, 0xc0,
	0xb5, 0x2a, 0xa7, 0x04, 0x89, 0xaa, 0x07, 0x40, 0x75, 0x12, 0xda, 0x8a, 0x86, 0x46, 0x9b, 0x20,
	0x24, 0x2e, 0xab, 0xc9, 0xee, 0xd8, 0x5e, 0x65, 0x77, 0x67, 0x33, 0x33, 0x9b, 0xd8, 0xfc, 0x01,
	0x6e, 0xc0, 0x91, 0x9f, 0xc0, 0x4f, 0xe9, 0x8d, 0x1e, 0x2b, 0x0e, 0x15, 0x4a, 0xfe, 0x08, 0x9a,
	0x77, 0x67, 0x13, 0x27, 0xe5, 0x00, 0xe2, 0xc0, 0x69, 0x67, 0x9e, 0xe7, 0x99, 0x77, 0xe6, 0x7d,
	0xdf, 0x67, 0x66, 0xa1, 0x21, 0x59, 0xc8, 0x3c, 0x35, 0x4c, 0x04, 0x57, 0x9c, 0x94, 0x54, 0x90,
	0x1c, 0xac, 0xb5, 0xd8, 0x8c, 0x79, 0xa9, 0xe2, 0x22, 0x43, 0xd7, 0xae, 0x4f, 0xf8, 0x84, 0xe3,
	0x70, 0x5d, 0x8f, 0x0c, 0xba, 0x22, 0x52, 0xa9, 0x70, 0x98, 0x01, 0xbd, 0x4f, 0xa0, 0xe8, 0xf0,
	0x13, 0x72, 0x13, 0x2a, 0x53, 0x1a, 0xfb, 0x21, 0xb3, 0xad, 0xae, 0xd5, 0x6f, 0x38, 0x66, 0x46,
	0x08, 0x94, 0x7c, 0xaa, 0xa8, 0xbd, 0x84, 0x28, 0x8e, 0x7b, 0x8f, 0xa1, 0xbc, 0x2d, 0x04, 0x17,
	0xc4, 0x86, 0x92, 0xc7, 0xfd, 0x6c, 0x49, 0x79, 0x54, 0x7a, 0xf5, 0xf6, 0x6e, 0xc1, 0x41, 0x84,
	0xdc, 0x84, 0x62, 0x24, 0x27, 0xb8, 0xaa, 0x66, 0x08, 0x0d, 0xf4, 0x7e, 0x2a, 0x42, 0x6b, 0x0f,
	0xcf, 0xee, 0x30, 0x99, 0xf0, 0x58, 0x32, 0x72, 0x0f, 0xca, 0x4c, 0x47, 0xc3, 0x28, 0xf5, 0x8d,
	0xfa, 0x50, 0x67, 0x33, 0xc4, 0x0d, 0x9c, 0x8c, 0x21, 0xef, 0x43, 0x49, 0xf0, 0x13, 0x69, 0x2f,
	0x75, 0x8b, 0xfd, 0xfa, 0x46, 0x2d, 0x53, 0x38, 0xfc, 0xc4, 0x41, 0x98, 0xdc, 0x87, 0x8a, 0x37,
	0x4d, 0xe3, 0x43, 0x69, 0x17, 0x51, 0x60, 0x42, 0x6c, 0x6a, 0xcc, 0x6c, 0x6e, 0x04, 0xe4, 0x63,
	0xa8, 0x9e, 0x50, 0x11, 0x07, 0xf1, 0x44, 0xda, 0xa5, 0x45, 0x71, 0xb6, 0xdf, 0x39, 0x49, 0x3e,
	0x80, 0x26, 0x4f, 0x55, 0x92, 0x2a, 0xd7, 0xe3, 0x69, 0xac, 0xa4, 0x5d, 0xee, 0x16, 0xfb, 0x45,
	0xa7, 0x91, 0x81, 0x9b, 0x88, 0x69, 0x91, 0x59, 0x90, 0xa9, 0xec, 0x4a, 0xd7, 0xd2, 0x22, 0x03,
	0xa2, 0x8a, 0xbc, 0x84, 0x6b, 0x59, 0x67, 0x02, 0x1e, 0xbb, 0x32, 0x8d, 0x22, 0x2a, 0x02, 0x26,
	0xed, 0x2a, 0xee, 0xde, 0x31, 0xbb, 0x9b, 0xd6, 0x6d, 0xe7, 0xc2, 0x3d, 0xd4, 0xcd, 0x1d, 0xc2,
	0x2e, 0x23, 0x01, 0x93, 0xe4, 0x11, 0xd4, 0x59, 0xac, 0xab, 0xec, 0xaa, 0x79, 0xc2, 0xec, 0x5a,
	0xd7, 0xea, 0xb7, 0x36, 0xda, 0x26, 0x10, 0x12, 0xfb, 0xf3, 0x84, 0x99, 0xc4, 0x81, 0x9d, 0x23,
	0xba, 0x97, 0xb1, 0x7f, 0x2c, 0x6d, 0xc0, 0x54, 0x70, 0xdc, 0xfb, 0xd9, 0x82, 0x32, 0x16, 0x8a,
	0xec, 0x43, 0x4d, 0x57, 0xd3, 0xc5, 0x76, 0x17, 0x75, 0xbb, 0x47, 0x8f, 0x74, 0x88, 0x3f, 0xde,
	0xde, 0x5d, 0x9f, 0x04, 0x6a, 0x9a, 0x1e, 0x0c, 0x3d, 0x1e, 0xad, 0x27, 0x41, 0x3c, 0xf1, 0x68,
	0xb2, 0xae, 0xb7, 0x5b, 0x97, 0x53, 0x2a, 0x98, 0x7f, 0x30, 0x57, 0x4c, 0x0e, 0xf7, 0x70, 0x3c,
	0xd2, 0x63, 0xa7, 0xaa, 0x23, 0x6d, 0x51, 0x45, 0xc9, 0x43, 0x13, 0x35, 0x62, 0x8a, 0x9a, 0x8a,
	0x37, 0xcf, 0xfb, 0xb7, 0xc3, 0x14, 0x35, 0xe7, 0xc4, 0x15, 0x7a, 0xde, 0xdb, 0x86, 0x65, 0x43,
	0x91, 0x3b, 0x97, 0x4c, 0x59, 0xcc, 0x7b, 0x69, 0xac, 0x79, 0x07, 0x2a, 0x21, 0x8b, 0x27, 0x6a,
	0x8a, 0x36, 0x3b, 0x67, 0x33, 0xac, 0xf7, 0x7b, 0x05, 0x60, 0xeb, 0xc9, 0x53, 0x87, 0x1d, 0xa5,
	0x4c, 0x2a, 0x32, 0x80, 0x55, 0xa9, 0xa8, 0x50, 0xae, 0x92, 0xee, 0x98, 0x86, 0xe1, 0x01, 0xf5,
	0x0e, 0x31, 0x6a, 0xc9, 0x59, 0x41, 0x62, 0x5f, 0x7e, 0x65, 0x60, 0xf2, 0x00, 0x6a, 0xf9, 0x5d,
	0xca, 0x3d, 0xd7, 0xba, 0xdc, 0x27, 0xe7, 0x42, 0x40, 0x86, 0xd0, 0x56, 0x41, 0xc4, 0xdc, 0x1f,
	0x78, 0xcc, 0x5c, 0x3e, 0x1e, 0x4b, 0xa6, 0xb0, 0x7c, 0xf9, 0x81, 0x5a, 0x9a, 0xfd, 0x9e, 0xc7,
	0xec, 0x25, 0x72, 0x64, 0x0d, 0xca, 0xe3, 0x90, 0xa2, 0xff, 0xac, 0x7e, 0xc9, 0x88, 0x32, 0x88,
	0x7c, 0x08, 0x2d, 0xe3, 0xba, 0x2c, 0x50, 0x66, 0xbb, 0xa6, 0x63, 0xbc, 0x98, 0x45, 0x90, 0xe4,
	0x21, 0x5c, 0xf7, 0x78, 0xa8, 0x6f, 0x91, 0x2b, 0x68, 0x3c, 0x61, 0xb9, 0x47, 0xb5, 0xfd, 0xaa,
	0x0e, 0x31, 0x9c, 0xa3, 0x29, 0xe3, 0xd4, 0x01, 0xac, 0x46, 0x74, 0xe6, 0x5e, 0x76, 0xeb, 0x72,
	0x96, 0x7e, 0x44, 0x67, 0xdf, 0x2d, 0x1a, 0xf6, 0x8a, 0xbf, 0xaa, 0xff, 0xd8, 0x5f, 0xb7, 0xa1,
	0x2a, 0x8f, 0x42, 0x37, 0xd2, 0x4f, 0x42, 0x0d, 0x63, 0x2f, 0xcb, 0xa3, 0x70, 0x47, 0xbf, 0x07,
	0x03, 0x68, 0x5d, 0x14, 0x29, 0xa6, 0x11, 0xb3, 0xeb, 0x0b, 0x4f, 0x43, 0x23, 0x2f, 0xd1, 0x37,
	0x34, 0x62, 0xe4, 0x0b, 0x78, 0x2f, 0xcf, 0xee, 0xef, 0x2e, 0x4e, 0x03, 0x93, 0xbc, 0x6d, 0x24,
	0xdb, 0xef, 0xde, 0x8f, 0x07, 0x40, 0x74, 0xae, 0x34, 0x0c, 0xf9, 0x09, 0xf3, 0xdd, 0x84, 0x7a,
	0x87, 0x4c, 0xd9, 0x4d, 0x3c, 0x50, 0x3b, 0xa2, 0xb3, 0x27, 0x19, 0xb1, 0x8b, 0x38, 0x79, 0x0a,
	0xd7, 0xf0, 0x6d, 0x70, 0x23, 0x16, 0x71, 0x31, 0x77, 0x43, 0x3a, 0xe7, 0xa9, 0xb2, 0x5b, 0xf8,
	0x18, 0xdd, 0x5a, 0x78, 0x49, 0x76, 0x90, 0x7f, 0x81, 0xb4, 0xb3, 0xea, 0x5d, 0x85, 0x48, 0x07,
	0xea, 0x81, 0x74, 0x45, 0x12, 0xbb, 0x6c, 0x96, 0x08, 0x7b, 0x05, 0x8f, 0x59, 0x0b, 0xa4, 0x93,
	0xc4, 0xdb, 0xb3, 0x44, 0x90, 0x8f, 0xa0, 0x94, 0x4a, 0x26, 0xec, 0x36, 0x46, 0x26, 0x59, 0xe4,
	0x6f, 0x25, 0x13, 0xcf, 0x7d, 0x16, 0xab, 0x40, 0xcd, 0x1d, 0xe4, 0xc9, 0xa7, 0xd0, 0x14, 0x9c,
	0xe7, 0xb9, 0x73, 0x61, 0xaf, 0xe2, 0x82, 0xab, 0x0e, 0x6c, 0x68, 0x51, 0x3e, 0xd3, 0xfd, 0x1d,
	0x73, 0xe1, 0x31, 0x77, 0xb1, 0x73, 0x04, 0x8f, 0xb0, 0x82, 0xc4, 0x45, 0xe3, 0xc8, 0x67, 0x70,
	0xcb, 0x0f, 0x8e, 0xdd, 0x44, 0x30, 0x2f, 0x90, 0xba, 0xb6, 0x41, 0xec, 0x09, 0x16, 0xb1, 0x58,
	0xd9, 0xd7, 0xba, 0x56, 0xbf, 0xe9, 0xdc, 0xf0, 0x83, 0xe3, 0xdd, 0x9c, 0x7d, 0x9e, 0x93, 0xbd,
	0x2f, 0x61, 0xf5, 0x9d, 0x42, 0x90, 0x01, 0x54, 0x58, 0xec, 0x07, 0x34, 0xc6, 0xcb, 0xd4, 0xda,
	0x68, 0xe4, 0x3e, 0xd1, 0x58, 0x7e, 0x25, 0x33, 0x45, 0x6f, 0x1f, 0x1a, 0x8b, 0xf9, 0x92, 0x7b,
	0x50, 0xd3, 0x19, 0x67, 0x7e, 0xb0, 0x16, 0xfc, 0x50, 0xd5, 0x30, 0x7a, 0x21, 0x97, 0x4c, 0xb9,
	0x54, 0x97, 0xfe, 0x26, 0x28, 0x79, 0xc6, 0xa5, 0xea, 0xfd, 0xb8, 0x04, 0xad, 0x3d, 0x25, 0x18,
	0x8d, 0xfe, 0xcd, 0x2f, 0xe5, 0x6b, 0xf3, 0x5f, 0xfb, 0x8f, 0x0f, 0x1d, 0x06, 0xf9, 0x3f, 0xfe,
	0x2a, 0xf9, 0x5b, 0xbe, 0x7c, 0xf1, 0x96, 0x0f, 0x3e, 0x07, 0x58, 0x68, 0xf3, 0x0a, 0xd4, 0xf5,
	0x77, 0x8b, 0x8d, 0x69, 0x1a, 0xaa, 0x76, 0x81, 0x34, 0xa1, 0xa6, 0x01, 0xec, 0x61, 0xdb, 0xca,
	0xf9, 0xcd, 0x67, 0xa3, 0x90, 0x7b, 0x87, 0xed, 0xa5, 0xc1, 0x7d, 0xa8, 0x64, 0x6d, 0x23, 0x6d,
	0x68, 0xbc, 0x08, 0x94, 0x0a, 0x59, 0x36, 0xcf, 0xd6, 0x8e, 0x82, 0x89, 0x99, 0x5a, 0xa3, 0xc7,
	0x6f, 0x7e, 0xab, 0x5a, 0xaf, 0x4e, 0x3b, 0xd6, 0xeb, 0xd3, 0x8e, 0xf5, 0xe7, 0x69, 0xc7, 0xfa,
	0xe5, 0xac, 0x53, 0xf8, 0xf5, 0xac, 0x53, 0x78, 0x7d, 0xd6, 0x29, 0xbc, 0x39, 0xeb, 0x14, 0xe0,
	0x86, 0xc7, 0xa3, 0xa1, 0x29, 0xe1, 0x50, 0x05, 0xfe, 0x01, 0x16, 0x64, 0xd7, 0xfa, 0x2b, 0x00,
	0x00, 0xff, 0xff, 0x78, 0xbb, 0x58, 0x0d, 0xbb, 0x08, 0x00, 0x00,
}

func (m *Row) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Row) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Row) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Data != nil {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintSelect(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x12
	}
	if m.Handle != nil {
		i -= len(m.Handle)
		copy(dAtA[i:], m.Handle)
		i = encodeVarintSelect(dAtA, i, uint64(len(m.Handle)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Error) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Error) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Error) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.Msg)
	copy(dAtA[i:], m.Msg)
	i = encodeVarintSelect(dAtA, i, uint64(len(m.Msg)))
	i--
	dAtA[i] = 0x12
	i = encodeVarintSelect(dAtA, i, uint64(m.Code))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *SelectResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SelectResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SelectResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Ndvs) > 0 {
		for iNdEx := len(m.Ndvs) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintSelect(dAtA, i, uint64(m.Ndvs[iNdEx]))
			i--
			dAtA[i] = 0x50
		}
	}
	i = encodeVarintSelect(dAtA, i, uint64(m.EncodeType))
	i--
	dAtA[i] = 0x48
	if len(m.ExecutionSummaries) > 0 {
		for iNdEx := len(m.ExecutionSummaries) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ExecutionSummaries[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSelect(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if m.WarningCount != nil {
		i = encodeVarintSelect(dAtA, i, uint64(*m.WarningCount))
		i--
		dAtA[i] = 0x30
	}
	if len(m.OutputCounts) > 0 {
		for iNdEx := len(m.OutputCounts) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintSelect(dAtA, i, uint64(m.OutputCounts[iNdEx]))
			i--
			dAtA[i] = 0x28
		}
	}
	if len(m.Warnings) > 0 {
		for iNdEx := len(m.Warnings) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Warnings[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSelect(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Chunks) > 0 {
		for iNdEx := len(m.Chunks) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Chunks[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSelect(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Rows) > 0 {
		for iNdEx := len(m.Rows) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Rows[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSelect(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Error != nil {
		{
			size, err := m.Error.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSelect(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Chunk) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Chunk) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Chunk) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RowsMeta) > 0 {
		for iNdEx := len(m.RowsMeta) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RowsMeta[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSelect(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	{
		size := m.RowsData.Size()
		i -= size
		if _, err := m.RowsData.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintSelect(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	return len(dAtA) - i, nil
}

func (m *RowMeta) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RowMeta) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RowMeta) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintSelect(dAtA, i, uint64(m.Length))
	i--
	dAtA[i] = 0x10
	i = encodeVarintSelect(dAtA, i, uint64(m.Handle))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *DAGRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DAGRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DAGRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DivPrecisionIncrement != nil {
		i = encodeVarintSelect(dAtA, i, uint64(*m.DivPrecisionIncrement))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x98
	}
	if m.ForceEncodeType != nil {
		i--
		if *m.ForceEncodeType {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x90
	}
	if m.RootExecutor != nil {
		{
			size, err := m.RootExecutor.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSelect(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if m.User != nil {
		{
			size, err := m.User.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSelect(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if m.IsRpnExpr != nil {
		i--
		if *m.IsRpnExpr {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x78
	}
	if m.ChunkMemoryLayout != nil {
		{
			size, err := m.ChunkMemoryLayout.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSelect(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	if m.MaxAllowedPacket != nil {
		i = encodeVarintSelect(dAtA, i, uint64(*m.MaxAllowedPacket))
		i--
		dAtA[i] = 0x68
	}
	if m.CollectExecutionSummaries != nil {
		i--
		if *m.CollectExecutionSummaries {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x60
	}
	i -= len(m.TimeZoneName)
	copy(dAtA[i:], m.TimeZoneName)
	i = encodeVarintSelect(dAtA, i, uint64(len(m.TimeZoneName)))
	i--
	dAtA[i] = 0x5a
	if m.SqlMode != nil {
		i = encodeVarintSelect(dAtA, i, uint64(*m.SqlMode))
		i--
		dAtA[i] = 0x48
	}
	i = encodeVarintSelect(dAtA, i, uint64(m.EncodeType))
	i--
	dAtA[i] = 0x40
	if m.MaxWarningCount != nil {
		i = encodeVarintSelect(dAtA, i, uint64(*m.MaxWarningCount))
		i--
		dAtA[i] = 0x38
	}
	if m.CollectRangeCounts != nil {
		i--
		if *m.CollectRangeCounts {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if len(m.OutputOffsets) > 0 {
		for iNdEx := len(m.OutputOffsets) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintSelect(dAtA, i, uint64(m.OutputOffsets[iNdEx]))
			i--
			dAtA[i] = 0x28
		}
	}
	i = encodeVarintSelect(dAtA, i, uint64(m.Flags))
	i--
	dAtA[i] = 0x20
	i = encodeVarintSelect(dAtA, i, uint64(m.TimeZoneOffset))
	i--
	dAtA[i] = 0x18
	if len(m.Executors) > 0 {
		for iNdEx := len(m.Executors) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Executors[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSelect(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.StartTsFallback != nil {
		i = encodeVarintSelect(dAtA, i, uint64(*m.StartTsFallback))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ChunkMemoryLayout) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChunkMemoryLayout) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChunkMemoryLayout) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintSelect(dAtA, i, uint64(m.Endian))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *UserIdentity) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserIdentity) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserIdentity) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.UserHost)
	copy(dAtA[i:], m.UserHost)
	i = encodeVarintSelect(dAtA, i, uint64(len(m.UserHost)))
	i--
	dAtA[i] = 0x12
	i -= len(m.UserName)
	copy(dAtA[i:], m.UserName)
	i = encodeVarintSelect(dAtA, i, uint64(len(m.UserName)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *StreamResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StreamResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StreamResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Ndvs) > 0 {
		for iNdEx := len(m.Ndvs) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintSelect(dAtA, i, uint64(m.Ndvs[iNdEx]))
			i--
			dAtA[i] = 0x38
		}
	}
	if m.WarningCount != nil {
		i = encodeVarintSelect(dAtA, i, uint64(*m.WarningCount))
		i--
		dAtA[i] = 0x30
	}
	if len(m.OutputCounts) > 0 {
		for iNdEx := len(m.OutputCounts) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintSelect(dAtA, i, uint64(m.OutputCounts[iNdEx]))
			i--
			dAtA[i] = 0x28
		}
	}
	if len(m.Warnings) > 0 {
		for iNdEx := len(m.Warnings) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Warnings[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSelect(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	{
		size := m.Data.Size()
		i -= size
		if _, err := m.Data.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintSelect(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.Error != nil {
		{
			size, err := m.Error.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSelect(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintSelect(dAtA []byte, offset int, v uint64) int {
	offset -= sovSelect(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Row) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Handle != nil {
		l = len(m.Handle)
		n += 1 + l + sovSelect(uint64(l))
	}
	if m.Data != nil {
		l = len(m.Data)
		n += 1 + l + sovSelect(uint64(l))
	}
	return n
}

func (m *Error) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovSelect(uint64(m.Code))
	l = len(m.Msg)
	n += 1 + l + sovSelect(uint64(l))
	return n
}

func (m *SelectResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovSelect(uint64(l))
	}
	if len(m.Rows) > 0 {
		for _, e := range m.Rows {
			l = e.Size()
			n += 1 + l + sovSelect(uint64(l))
		}
	}
	if len(m.Chunks) > 0 {
		for _, e := range m.Chunks {
			l = e.Size()
			n += 1 + l + sovSelect(uint64(l))
		}
	}
	if len(m.Warnings) > 0 {
		for _, e := range m.Warnings {
			l = e.Size()
			n += 1 + l + sovSelect(uint64(l))
		}
	}
	if len(m.OutputCounts) > 0 {
		for _, e := range m.OutputCounts {
			n += 1 + sovSelect(uint64(e))
		}
	}
	if m.WarningCount != nil {
		n += 1 + sovSelect(uint64(*m.WarningCount))
	}
	if len(m.ExecutionSummaries) > 0 {
		for _, e := range m.ExecutionSummaries {
			l = e.Size()
			n += 1 + l + sovSelect(uint64(l))
		}
	}
	n += 1 + sovSelect(uint64(m.EncodeType))
	if len(m.Ndvs) > 0 {
		for _, e := range m.Ndvs {
			n += 1 + sovSelect(uint64(e))
		}
	}
	return n
}

func (m *Chunk) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.RowsData.Size()
	n += 1 + l + sovSelect(uint64(l))
	if len(m.RowsMeta) > 0 {
		for _, e := range m.RowsMeta {
			l = e.Size()
			n += 1 + l + sovSelect(uint64(l))
		}
	}
	return n
}

func (m *RowMeta) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovSelect(uint64(m.Handle))
	n += 1 + sovSelect(uint64(m.Length))
	return n
}

func (m *DAGRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StartTsFallback != nil {
		n += 1 + sovSelect(uint64(*m.StartTsFallback))
	}
	if len(m.Executors) > 0 {
		for _, e := range m.Executors {
			l = e.Size()
			n += 1 + l + sovSelect(uint64(l))
		}
	}
	n += 1 + sovSelect(uint64(m.TimeZoneOffset))
	n += 1 + sovSelect(uint64(m.Flags))
	if len(m.OutputOffsets) > 0 {
		for _, e := range m.OutputOffsets {
			n += 1 + sovSelect(uint64(e))
		}
	}
	if m.CollectRangeCounts != nil {
		n += 2
	}
	if m.MaxWarningCount != nil {
		n += 1 + sovSelect(uint64(*m.MaxWarningCount))
	}
	n += 1 + sovSelect(uint64(m.EncodeType))
	if m.SqlMode != nil {
		n += 1 + sovSelect(uint64(*m.SqlMode))
	}
	l = len(m.TimeZoneName)
	n += 1 + l + sovSelect(uint64(l))
	if m.CollectExecutionSummaries != nil {
		n += 2
	}
	if m.MaxAllowedPacket != nil {
		n += 1 + sovSelect(uint64(*m.MaxAllowedPacket))
	}
	if m.ChunkMemoryLayout != nil {
		l = m.ChunkMemoryLayout.Size()
		n += 1 + l + sovSelect(uint64(l))
	}
	if m.IsRpnExpr != nil {
		n += 2
	}
	if m.User != nil {
		l = m.User.Size()
		n += 2 + l + sovSelect(uint64(l))
	}
	if m.RootExecutor != nil {
		l = m.RootExecutor.Size()
		n += 2 + l + sovSelect(uint64(l))
	}
	if m.ForceEncodeType != nil {
		n += 3
	}
	if m.DivPrecisionIncrement != nil {
		n += 2 + sovSelect(uint64(*m.DivPrecisionIncrement))
	}
	return n
}

func (m *ChunkMemoryLayout) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovSelect(uint64(m.Endian))
	return n
}

func (m *UserIdentity) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UserName)
	n += 1 + l + sovSelect(uint64(l))
	l = len(m.UserHost)
	n += 1 + l + sovSelect(uint64(l))
	return n
}

func (m *StreamResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovSelect(uint64(l))
	}
	l = m.Data.Size()
	n += 1 + l + sovSelect(uint64(l))
	if len(m.Warnings) > 0 {
		for _, e := range m.Warnings {
			l = e.Size()
			n += 1 + l + sovSelect(uint64(l))
		}
	}
	if len(m.OutputCounts) > 0 {
		for _, e := range m.OutputCounts {
			n += 1 + sovSelect(uint64(e))
		}
	}
	if m.WarningCount != nil {
		n += 1 + sovSelect(uint64(*m.WarningCount))
	}
	if len(m.Ndvs) > 0 {
		for _, e := range m.Ndvs {
			n += 1 + sovSelect(uint64(e))
		}
	}
	return n
}

func sovSelect(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSelect(x uint64) (n int) {
	return sovSelect(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Row) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSelect
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Row: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Row: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Handle", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSelect
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSelect
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSelect
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Handle = append(m.Handle[:0], dAtA[iNdEx:postIndex]...)
			if m.Handle == nil {
				m.Handle = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSelect
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSelect
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSelect
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSelect(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSelect
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Error) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSelect
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Error: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Error: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSelect
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSelect
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSelect
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSelect
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSelect(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSelect
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SelectResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSelect
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SelectResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SelectResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSelect
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSelect
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSelect
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &Error{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rows", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSelect
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSelect
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSelect
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rows = append(m.Rows, &Row{})
			if err := m.Rows[len(m.Rows)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chunks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSelect
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSelect
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSelect
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Chunks = append(m.Chunks, Chunk{})
			if err := m.Chunks[len(m.Chunks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Warnings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSelect
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSelect
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSelect
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Warnings = append(m.Warnings, &Error{})
			if err := m.Warnings[len(m.Warnings)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSelect
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.OutputCounts = append(m.OutputCounts, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSelect
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthSelect
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthSelect
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.OutputCounts) == 0 {
					m.OutputCounts = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSelect
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.OutputCounts = append(m.OutputCounts, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field OutputCounts", wireType)
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WarningCount", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSelect
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WarningCount = &v
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecutionSummaries", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSelect
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSelect
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSelect
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExecutionSummaries = append(m.ExecutionSummaries, &ExecutorExecutionSummary{})
			if err := m.ExecutionSummaries[len(m.ExecutionSummaries)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncodeType", wireType)
			}
			m.EncodeType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSelect
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EncodeType |= EncodeType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSelect
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Ndvs = append(m.Ndvs, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSelect
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthSelect
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthSelect
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Ndvs) == 0 {
					m.Ndvs = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSelect
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Ndvs = append(m.Ndvs, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Ndvs", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSelect(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSelect
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Chunk) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSelect
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Chunk: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Chunk: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RowsData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSelect
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSelect
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSelect
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RowsData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RowsMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSelect
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSelect
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSelect
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RowsMeta = append(m.RowsMeta, RowMeta{})
			if err := m.RowsMeta[len(m.RowsMeta)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSelect(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSelect
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RowMeta) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSelect
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RowMeta: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RowMeta: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Handle", wireType)
			}
			m.Handle = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSelect
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Handle |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Length", wireType)
			}
			m.Length = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSelect
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Length |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSelect(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSelect
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DAGRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSelect
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DAGRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DAGRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTsFallback", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSelect
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.StartTsFallback = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Executors", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSelect
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSelect
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSelect
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Executors = append(m.Executors, &Executor{})
			if err := m.Executors[len(m.Executors)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeZoneOffset", wireType)
			}
			m.TimeZoneOffset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSelect
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimeZoneOffset |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flags", wireType)
			}
			m.Flags = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSelect
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Flags |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSelect
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.OutputOffsets = append(m.OutputOffsets, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSelect
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthSelect
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthSelect
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.OutputOffsets) == 0 {
					m.OutputOffsets = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSelect
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.OutputOffsets = append(m.OutputOffsets, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field OutputOffsets", wireType)
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollectRangeCounts", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSelect
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.CollectRangeCounts = &b
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxWarningCount", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSelect
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MaxWarningCount = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncodeType", wireType)
			}
			m.EncodeType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSelect
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EncodeType |= EncodeType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SqlMode", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSelect
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SqlMode = &v
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeZoneName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSelect
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSelect
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSelect
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TimeZoneName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollectExecutionSummaries", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSelect
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.CollectExecutionSummaries = &b
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxAllowedPacket", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSelect
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MaxAllowedPacket = &v
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChunkMemoryLayout", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSelect
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSelect
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSelect
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ChunkMemoryLayout == nil {
				m.ChunkMemoryLayout = &ChunkMemoryLayout{}
			}
			if err := m.ChunkMemoryLayout.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsRpnExpr", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSelect
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsRpnExpr = &b
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSelect
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSelect
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSelect
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.User == nil {
				m.User = &UserIdentity{}
			}
			if err := m.User.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RootExecutor", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSelect
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSelect
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSelect
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RootExecutor == nil {
				m.RootExecutor = &Executor{}
			}
			if err := m.RootExecutor.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForceEncodeType", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSelect
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.ForceEncodeType = &b
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DivPrecisionIncrement", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSelect
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DivPrecisionIncrement = &v
		default:
			iNdEx = preIndex
			skippy, err := skipSelect(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSelect
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChunkMemoryLayout) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSelect
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChunkMemoryLayout: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChunkMemoryLayout: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Endian", wireType)
			}
			m.Endian = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSelect
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Endian |= Endian(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSelect(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSelect
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserIdentity) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSelect
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserIdentity: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserIdentity: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSelect
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSelect
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSelect
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserHost", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSelect
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSelect
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSelect
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserHost = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSelect(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSelect
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StreamResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSelect
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StreamResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StreamResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSelect
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSelect
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSelect
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &Error{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSelect
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSelect
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSelect
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Warnings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSelect
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSelect
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSelect
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Warnings = append(m.Warnings, &Error{})
			if err := m.Warnings[len(m.Warnings)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSelect
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.OutputCounts = append(m.OutputCounts, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSelect
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthSelect
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthSelect
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.OutputCounts) == 0 {
					m.OutputCounts = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSelect
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.OutputCounts = append(m.OutputCounts, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field OutputCounts", wireType)
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WarningCount", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSelect
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WarningCount = &v
		case 7:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSelect
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Ndvs = append(m.Ndvs, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSelect
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthSelect
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthSelect
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Ndvs) == 0 {
					m.Ndvs = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSelect
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Ndvs = append(m.Ndvs, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Ndvs", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSelect(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSelect
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSelect(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSelect
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSelect
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSelect
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSelect
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSelect
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSelect
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSelect        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSelect          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSelect = fmt.Errorf("proto: unexpected end of group")
)
